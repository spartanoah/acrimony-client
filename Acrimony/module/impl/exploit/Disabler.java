/*
 * Decompiled with CFR 0.153-SNAPSHOT (d6f6758-dirty).
 */
package Acrimony.module.impl.exploit;

import Acrimony.Acrimony;
import Acrimony.event.Listener;
import Acrimony.event.impl.EntityActionEvent;
import Acrimony.event.impl.MotionEvent;
import Acrimony.event.impl.MoveEvent;
import Acrimony.event.impl.PacketReceiveEvent;
import Acrimony.event.impl.PacketSendEvent;
import Acrimony.module.Category;
import Acrimony.module.Module;
import Acrimony.module.impl.movement.Speed;
import Acrimony.setting.impl.BooleanSetting;
import Acrimony.setting.impl.DoubleSetting;
import Acrimony.setting.impl.IntegerSetting;
import Acrimony.setting.impl.ModeSetting;
import Acrimony.util.misc.TimerUtil;
import Acrimony.util.network.PacketUtil;
import Acrimony.util.world.WorldUtil;
import java.util.ArrayList;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0DPacketCloseWindow;
import net.minecraft.network.play.client.C0EPacketClickWindow;
import net.minecraft.network.play.client.C16PacketClientStatus;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

public class Disabler
extends Module {
    private final ModeSetting mode = new ModeSetting("Mode", "Watchdog inventory", "Watchdog inventory", "Watchdog strafe silent", "Pingspoof", "Custom", "Test");
    private final BooleanSetting strict = new BooleanSetting("Strict", () -> this.mode.is("Watchdog strafe silent"), false);
    private final IntegerSetting blinkTicks = new IntegerSetting("Blink ticks", () -> this.mode.is("Watchdog strafe silent"), 10, 3, 14, 1);
    private final IntegerSetting delay = new IntegerSetting("Delay", () -> this.mode.is("Pingspoof"), 500, 50, 4000, 50);
    private final BooleanSetting s08 = new BooleanSetting("S08", () -> this.mode.is("Pingspoof"), false);
    private final BooleanSetting balance = new BooleanSetting("Balance", () -> this.mode.is("Custom"), true);
    private final BooleanSetting noSprint = new BooleanSetting("No Sprint", () -> this.mode.is("Custom"), false);
    private final BooleanSetting noSneak = new BooleanSetting("No Sneak", () -> this.mode.is("Custom"), false);
    private final BooleanSetting silentTeleportAccept = new BooleanSetting("Silent teleport accept", () -> this.mode.is("Custom"), false);
    private final DoubleSetting silentRange = new DoubleSetting("Silent range", () -> this.mode.is("Custom") && this.silentTeleportAccept.isEnabled(), 8.0, 0.25, 20.0, 0.25);
    private Speed speedModule;
    private final TimerUtil timer = new TimerUtil();
    private final ArrayList<Packet> packetsQueue = new ArrayList();
    private boolean started;
    private int groundSpoofTicks;
    private int ticks;
    private int testTicks;
    private double motionX;
    private double motionZ;
    private double lastMotionX;
    private double lastMotionZ;
    private boolean blinking;

    public Disabler() {
        super("Disabler", Category.EXPLOIT);
        this.addSettings(this.mode, this.strict, this.blinkTicks, this.delay, this.s08, this.balance, this.noSprint, this.noSneak, this.silentTeleportAccept, this.silentRange);
    }

    @Override
    public void onEnable() {
        this.started = false;
        this.testTicks = 0;
        this.ticks = 0;
        this.groundSpoofTicks = 0;
    }

    @Override
    public void onDisable() {
        if (!this.packetsQueue.isEmpty()) {
            for (Packet packet : this.packetsQueue) {
                PacketUtil.sendPacketNoEvent(packet);
            }
            this.packetsQueue.clear();
        }
        Acrimony.instance.getPacketBlinkHandler().stopBlinking();
        Acrimony.instance.getPacketBlinkHandler().releasePackets();
        Acrimony.instance.getPacketDelayHandler().stopAll();
    }

    @Override
    public void onClientStarted() {
        this.speedModule = Acrimony.instance.getModuleManager().getModule(Speed.class);
    }

    @Listener
    public void onReceive(PacketReceiveEvent event) {
        switch (this.mode.getMode()) {
            case "Pingspoof": {
                if (!this.s08.isEnabled()) break;
                Acrimony.instance.getPacketBlinkHandler().startBlinking();
                this.blinking = true;
                this.timer.reset();
                break;
            }
            case "Custom": {
                if (!(event.getPacket() instanceof S08PacketPlayerPosLook)) break;
                S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook)event.getPacket();
                if (!this.silentTeleportAccept.isEnabled() || !Disabler.mc.getNetHandler().doneLoadingTerrain || !(Disabler.mc.thePlayer.getDistance(packet.getX(), packet.getY(), packet.getZ()) < this.silentRange.getValue())) break;
                event.setCancelled(true);
                PacketUtil.sendPacket(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), false));
            }
        }
    }

    @Listener
    public void onSend(PacketSendEvent event) {
        if (Disabler.mc.thePlayer == null) {
            return;
        }
        switch (this.mode.getMode()) {
            case "Custom": {
                if (!this.balance.isEnabled() || !(event.getPacket() instanceof C03PacketPlayer)) break;
                C03PacketPlayer packet = (C03PacketPlayer)event.getPacket();
                if (!packet.isMoving() && !packet.getRotating() && Disabler.mc.thePlayer.posX - Disabler.mc.thePlayer.lastTickPosX == 0.0 && Disabler.mc.thePlayer.posY - Disabler.mc.thePlayer.lastTickPosY == 0.0 && Disabler.mc.thePlayer.posZ - Disabler.mc.thePlayer.lastTickPosZ == 0.0) {
                    event.setCancelled(true);
                }
                ++this.testTicks;
                if (!(Disabler.mc.timer.timerSpeed > 1.0f)) break;
                if (this.testTicks % 4 != 0) {
                    Acrimony.instance.getPacketDelayHandler().startDelayingPing(250L);
                    break;
                }
                Acrimony.instance.getPacketDelayHandler().stopAll();
                Acrimony.instance.getPacketBlinkHandler().releasePackets();
                break;
            }
            case "Watchdog inventory": {
                if (event.getPacket() instanceof C16PacketClientStatus || event.getPacket() instanceof C0EPacketClickWindow) {
                    event.setCancelled(true);
                    this.packetsQueue.add((Packet)event.getPacket());
                    break;
                }
                if (!(event.getPacket() instanceof C0DPacketCloseWindow) || this.packetsQueue.isEmpty()) break;
                for (Packet packet : this.packetsQueue) {
                    PacketUtil.sendPacketNoEvent(packet);
                }
                this.packetsQueue.clear();
            }
        }
    }

    @Listener
    public void onEntityAction(EntityActionEvent event) {
        if (this.noSprint.isEnabled()) {
            event.setSprinting(false);
        }
        if (this.noSneak.isEnabled()) {
            event.setSneaking(false);
        }
    }

    @Listener
    public void onMove(MoveEvent event) {
        this.lastMotionX = this.motionX;
        this.lastMotionZ = this.motionZ;
        this.motionX = event.getX();
        this.motionZ = event.getZ();
    }

    @Listener
    public void onMotion(MotionEvent event) {
        switch (this.mode.getMode()) {
            case "Watchdog strafe silent": {
                boolean usingStrafelessSpeed;
                if (Disabler.mc.thePlayer.ticksExisted < 20) {
                    this.ticks = 0;
                    this.groundSpoofTicks = 0;
                }
                boolean bl = usingStrafelessSpeed = this.speedModule.mode.is("Watchdog") && this.speedModule.watchdogMode.is("Strafeless");
                if (this.speedModule.isEnabled() && !usingStrafelessSpeed && !Disabler.mc.thePlayer.onGround) {
                    if (++this.ticks >= 2 && Disabler.mc.thePlayer.fallDistance < 1.0f && WorldUtil.isBlockUnder(8)) {
                        boolean canGroundSpoof = false;
                        double diff = this.strict.isEnabled() ? 0.034 : 0.098;
                        double lastX = this.lastMotionX * (double)0.91f;
                        double lastZ = this.lastMotionZ * (double)0.91f;
                        if (this.motionX - lastX > diff) {
                            canGroundSpoof = true;
                        } else if (this.motionX - lastX < -diff) {
                            canGroundSpoof = true;
                        } else if (this.motionZ - lastZ > diff) {
                            canGroundSpoof = true;
                        } else if (this.motionZ - lastZ < -diff) {
                            canGroundSpoof = true;
                        }
                        if (canGroundSpoof) {
                            event.setOnGround(true);
                            if (this.groundSpoofTicks == 1) {
                                this.groundSpoofTicks = this.blinkTicks.getValue() + 1;
                                Acrimony.instance.getPacketBlinkHandler().releaseWithPingPacketsFirst();
                                Acrimony.instance.getPacketBlinkHandler().releaseWithPingPacketsLast();
                            } else if (this.groundSpoofTicks < 1) {
                                this.groundSpoofTicks = this.blinkTicks.getValue() + 1;
                            }
                            this.ticks = 0;
                            Acrimony.instance.getPacketBlinkHandler().releaseWithPingPacketsFirst();
                            Acrimony.instance.getPacketBlinkHandler().releaseWithPingPacketsLast();
                            this.blinking = true;
                        }
                    }
                } else {
                    this.ticks = 0;
                }
                if (this.groundSpoofTicks == 1 && this.blinking) {
                    Acrimony.instance.getPacketBlinkHandler().stopBlinking();
                    this.blinking = false;
                }
                --this.groundSpoofTicks;
                break;
            }
            case "Pingspoof": {
                if (this.timer.getTimeElapsed() >= (long)this.delay.getValue()) {
                    if (this.blinking) {
                        Acrimony.instance.getPacketBlinkHandler().releasePackets();
                        this.blinking = false;
                    } else {
                        Acrimony.instance.getPacketBlinkHandler().releasePingPackets();
                    }
                    this.timer.reset();
                }
                Acrimony.instance.getPacketBlinkHandler().startBlinking();
            }
        }
    }

    @Override
    public String getSuffix() {
        return this.mode.getMode();
    }
}

